version: '3.8'

services:
  # FastAPI Backend Service
  api:
    build: .
    container_name: churn_api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
    command: uvicorn app.api:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - churn_network

  # Streamlit Dashboard Service  
  dashboard:
    build: .
    container_name: churn_dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - ENVIRONMENT=production
      - API_URL=http://api:8000
    command: streamlit run app/streamlit_app.py --server.port 8501 --server.address 0.0.0.0 --server.headless true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - churn_network

  # Redis Cache Service (Optional)
  redis:
    image: redis:7-alpine
    container_name: churn_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - churn_network

  # PostgreSQL Database Service (Optional)
  postgres:
    image: postgres:15-alpine
    container_name: churn_postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=churn_analytics
      - POSTGRES_USER=churn_user
      - POSTGRES_PASSWORD=churn_password_2024
    restart: unless-stopped
    networks:
      - churn_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: churn_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    networks:
      - churn_network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  churn_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
